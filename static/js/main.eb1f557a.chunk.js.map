{"version":3,"sources":["components/SpriteTile.js","components/Search.js","icons/InfoIcon.js","components/Footer.js","components/CompDisplay.js","App.js","serviceWorker.js","index.js"],"names":["SpriteTile","pokemon","setPokedex","displayId","id","length","Col","className","onClick","tabIndex","onKeyDown","event","key","src","sprite","name","Badge","pill","variant","Search","display","setDisplay","options","search","setSearch","Row","InputGroup","FormControl","placeholder","value","onChange","target","filter","toLowerCase","indexOf","map","index","InfoIcon","width","height","viewBox","fill","xmlns","fillRule","d","clipRule","cx","cy","r","Footer","CompDisplay","useState","dimensions","setDimensions","dimFetched","setDimFetched","pokemonHeight","useEffect","pokemonUrl","url","img","Image","onload","this","checkDimensions","pokemonWidth","humanWidth","pikachuDimensions","humanPixels","Container","rounded","style","App","setOptions","selectedPokemon","setSelectedPokemon","loading","isLoading","fetchPokemon","document","addEventListener","handleClickOutside","removeEventListener","content","a","promises","Array","fetch","Promise","all","then","pokemonArr","response","json","sprites","front_default","capitalizedName","charAt","toUpperCase","slice","push","sort","b","Spinner","animation","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eb1f557a.chunk.js","sourcesContent":["import React from \"react\";\nimport { Col, Image, Badge } from \"react-bootstrap\";\n\nconst SpriteTile = ({ pokemon, setPokedex }) => {\n  const handleKeyDown = (event) => {\n    if (event.key === \"Enter\") {\n      setPokedex(pokemon);\n    }\n  };\n\n  let displayId = \"\" + pokemon.id;\n  while (displayId.length < 3) {\n    displayId = \"0\" + displayId;\n  }\n\n  return (\n    <Col\n      className=\"align-center mb-4\"\n      onClick={() => setPokedex(pokemon)}\n      tabIndex=\"0\"\n      onKeyDown={handleKeyDown}\n    >\n      <Image className=\"sprite\" src={pokemon.sprite} />\n      <div className=\"mb-2\">{pokemon.name}</div>\n      <Badge className=\"number-badge\" pill variant=\"light\">\n        {displayId}\n      </Badge>\n    </Col>\n  );\n};\n\nexport default SpriteTile;\n","import React from \"react\";\nimport { Row, InputGroup, FormControl } from \"react-bootstrap\";\nimport SpriteTile from \"./SpriteTile\";\n\nconst Search = ({\n  display,\n  setDisplay,\n  options,\n  search,\n  setSearch,\n  setPokedex,\n}) => {\n  const handleClick = () => {\n    setDisplay(true);\n    setSearch(\"\");\n  };\n\n  return (\n    <>\n      <Row>\n        <InputGroup>\n          <FormControl\n            placeholder=\"Search Pokemon\"\n            id=\"search\"\n            value={search}\n            onChange={(event) => setSearch(event.target.value)}\n            onClick={handleClick}\n          />\n        </InputGroup>\n      </Row>\n      {display && (\n        <Row className=\"options-container\">\n          {options\n            .filter(\n              ({ name }) =>\n                name.toLowerCase().indexOf(search.toLowerCase()) > -1\n            )\n            .map((value, index) => {\n              return (\n                <SpriteTile\n                  key={index}\n                  pokemon={value}\n                  setPokedex={setPokedex}\n                />\n              );\n            })}\n        </Row>\n      )}\n    </>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\n\nconst InfoIcon = () => (\n  <svg\n    className=\"bi bi-info-circle\"\n    width=\"0.7em\"\n    height=\"0.7em\"\n    viewBox=\"0 0 16 16\"\n    fill=\"currentColor\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M8 15A7 7 0 108 1a7 7 0 000 14zm0 1A8 8 0 108 0a8 8 0 000 16z\"\n      clipRule=\"evenodd\"\n    />\n    <path d=\"M8.93 6.588l-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588z\" />\n    <circle cx=\"8\" cy=\"4.5\" r=\"1\" />\n  </svg>\n);\n\nexport default InfoIcon;\n","import React from \"react\";\nimport InfoIcon from \"../icons/InfoIcon\";\n\nconst Footer = () => {\n  return (\n    <div className=\"d-flex footer mt-auto py-3 px-3 bg-dark justify-content-between\">\n      HeightDex\n      <div className=\"align-self-center mr-2 finger\">\n        <InfoIcon />\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Image as RBImage, Col } from \"react-bootstrap\";\n\nconst CompDisplay = ({ pokemon }) => {\n  const [dimensions, setDimensions] = useState({});\n  const [dimFetched, setDimFetched] = useState(false);\n  const { name, height: pokemonHeight } = pokemon;\n\n  useEffect(() => {\n    setDimFetched(false);\n  }, [pokemon.name]);\n\n  function checkDimensions(url) {\n    var img = new Image();\n    img.onload = function () {\n      setDimensions({\n        width: this.width,\n        height: this.height,\n      });\n    };\n    img.src = url;\n    return img;\n  }\n\n  let pokemonUrl = \"https://img.pokemondb.net/artwork/pikachu.jpg\";\n  if (name) {\n    pokemonUrl = `https://img.pokemondb.net/artwork/${name.toLowerCase()}.jpg`;\n    if (!dimFetched) {\n      checkDimensions(pokemonUrl);\n      setDimFetched(true);\n    }\n  }\n  const pikachuDimensions = { width: 360, height: 337 };\n  const humanHeight = 16.5;\n\n  let pokemonWidth;\n  let humanWidth;\n  if (!pokemonHeight) {\n    let humanPixels = pikachuDimensions.height * (humanHeight / 4);\n    pokemonWidth =\n      pikachuDimensions.width / (pikachuDimensions.width + humanPixels);\n    humanWidth = 1 - pokemonWidth;\n  } else {\n    let humanPixels = dimensions.height * (humanHeight / pokemonHeight);\n    pokemonWidth = dimensions.width / (dimensions.width + humanPixels);\n    humanWidth = 1 - pokemonWidth;\n  }\n\n  return (\n    <Container className=\"cont\">\n      <Row className=\"d-flex mx-auto\">\n        <Col className=\"d-flex justify-content-center align-items-end\">\n          <RBImage\n            src=\"/images/boy.jpg\"\n            rounded\n            style={{\n              width: `${humanWidth * 90}%`,\n            }}\n          />\n          <RBImage\n            src={pokemonUrl}\n            rounded\n            style={{\n              width: `${pokemonWidth * 90}%`,\n            }}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default CompDisplay;\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Spinner } from \"react-bootstrap\";\nimport \"./App.scss\";\nimport Search from \"./components/Search\";\nimport Footer from \"./components/Footer\";\nimport CompDisplay from \"./components/CompDisplay\";\n\nconst App = () => {\n  const [display, setDisplay] = useState(false);\n  const [options, setOptions] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [selectedPokemon, setSelectedPokemon] = useState({});\n  const [loading, isLoading] = useState(false);\n\n  useEffect(() => {\n    fetchPokemon();\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  const handleClickOutside = (event) => {\n    if (event.target.id !== \"search\" && event.target.className !== \"sprite\") {\n      setDisplay(false);\n    }\n  };\n\n  const fetchPokemon = async () => {\n    isLoading(true);\n    const pokemon = [];\n    const promises = new Array(807)\n      .fill()\n      .map((value, index) =>\n        fetch(`https://pokeapi.co/api/v2/pokemon/${index + 1}/`)\n      );\n\n    await Promise.all(promises).then((pokemonArr) => {\n      return pokemonArr.map((response) =>\n        response\n          .json()\n          .then(({ id, name, sprites: { front_default: sprite }, height }) => {\n            const capitalizedName =\n              name.charAt(0).toUpperCase() + name.slice(1);\n            if (sprite === null) {\n              sprite = \"/images/pokeball.jpg\";\n            }\n            pokemon.push({\n              id,\n              name: capitalizedName,\n              sprite,\n              height,\n            });\n            pokemon.sort((a, b) => {\n              return a.id > b.id ? 1 : -1;\n            });\n          })\n      );\n    });\n    setOptions(pokemon);\n    isLoading(false);\n  };\n\n  const setPokedex = (pokemon) => {\n    setSearch(pokemon.name);\n    setSelectedPokemon({\n      id: pokemon.id,\n      name: pokemon.name,\n      height: pokemon.height,\n    });\n    setDisplay(false);\n  };\n\n  let content;\n  if (loading) {\n    content = (\n      <Container className=\"h-100\">\n        <Spinner animation=\"border\" variant=\"warning\" />\n      </Container>\n    );\n  } else {\n    content = (\n      <Container>\n        <Container className=\"search-container\">\n          <Search\n            display={display}\n            setDisplay={setDisplay}\n            options={options}\n            search={search}\n            setSearch={setSearch}\n            setPokedex={setPokedex}\n          />\n        </Container>\n        <Row>\n          <CompDisplay pokemon={selectedPokemon} />\n        </Row>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      {content}\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}