{"version":3,"sources":["components/SpriteTile.js","components/Search.js","components/Footer.js","components/CompDisplay.js","App.js","serviceWorker.js","index.js"],"names":["SpriteTile","pokemon","setPokedex","displayId","id","length","Col","className","onClick","tabIndex","onKeyDown","event","key","Image","src","sprite","name","Badge","pill","variant","Search","display","setDisplay","options","search","setSearch","Row","InputGroup","FormControl","placeholder","value","onChange","target","filter","toLowerCase","indexOf","map","index","Footer","CompDisplay","pokemonHeight","height","pokemonUrl","pokemonImageHeight","personImageHeight","Container","rounded","style","padding","App","useState","setOptions","selectedPokemon","setSelectedPokemon","loading","isLoading","useEffect","fetchPokemon","document","addEventListener","handleClickOutside","removeEventListener","content","a","promises","Array","fill","fetch","Promise","all","then","pokemonArr","response","json","sprites","front_default","capitalizedName","charAt","toUpperCase","slice","push","sort","b","Spinner","animation","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc0e5561.chunk.js","sourcesContent":["import React from \"react\";\nimport { Col, Image, Badge } from \"react-bootstrap\";\n\nconst SpriteTile = ({ pokemon, setPokedex }) => {\n  const handleKeyDown = (event) => {\n    if (event.key === \"Enter\") {\n      setPokedex(pokemon);\n    }\n  };\n\n  let displayId = \"\" + pokemon.id;\n  while (displayId.length < 3) {\n    displayId = \"0\" + displayId;\n  }\n\n  return (\n    <Col\n      className=\"align-center mb-4\"\n      onClick={() => setPokedex(pokemon)}\n      tabIndex=\"0\"\n      onKeyDown={handleKeyDown}\n    >\n      <Image className=\"sprite\" src={pokemon.sprite} />\n      <div className=\"mb-2\">{pokemon.name}</div>\n      <Badge className=\"number-badge\" pill variant=\"light\">\n        {displayId}\n      </Badge>\n    </Col>\n  );\n};\n\nexport default SpriteTile;\n","import React from \"react\";\nimport { Row, InputGroup, FormControl } from \"react-bootstrap\";\nimport SpriteTile from \"./SpriteTile\";\n\nconst Search = ({\n  display,\n  setDisplay,\n  options,\n  search,\n  setSearch,\n  setPokedex,\n}) => {\n  const handleClick = () => {\n    setDisplay(true);\n    setSearch(\"\");\n  };\n\n  return (\n    <>\n      <Row className=\"w-80\">\n        <InputGroup className=\"mt-5 mb-3\">\n          <FormControl\n            placeholder=\"Search Pokemon\"\n            id=\"search\"\n            value={search}\n            onChange={(event) => setSearch(event.target.value)}\n            onClick={handleClick}\n          />\n        </InputGroup>\n      </Row>\n      {display && (\n        <Row className=\"options-container\">\n          {options\n            .filter(\n              ({ name }) =>\n                name.toLowerCase().indexOf(search.toLowerCase()) > -1\n            )\n            .map((value, index) => {\n              return (\n                <SpriteTile\n                  key={index}\n                  pokemon={value}\n                  setPokedex={setPokedex}\n                />\n              );\n            })}\n        </Row>\n      )}\n    </>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\n\nconst Footer = () => (\n  <footer className=\"footer mt-auto py-3 bg-dark\">HeightDex</footer>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport { Container, Row, Image, Col } from \"react-bootstrap\";\n\nconst CompDisplay = ({ pokemon }) => {\n  const { name, height: pokemonHeight } = pokemon;\n  let pokemonUrl = \"https://img.pokemondb.net/artwork/pikachu.jpg\";\n  if (name) {\n    pokemonUrl = `https://img.pokemondb.net/artwork/${name.toLowerCase()}.jpg`;\n  }\n\n  const humanHeight = 16.5;\n  const maxImageHeight = 300;\n  let pokemonImageHeight = maxImageHeight;\n  let personImageHeight = maxImageHeight;\n\n  if (!pokemonHeight) {\n    pokemonImageHeight = maxImageHeight * (4 / humanHeight);\n  } else if (pokemonHeight > humanHeight) {\n    personImageHeight = maxImageHeight * (16.5 / pokemonHeight);\n  } else {\n    pokemonImageHeight = maxImageHeight * (pokemonHeight / humanHeight);\n  }\n\n  return (\n    <Container className=\"cont\">\n      <Row className=\"align-items-end\">\n        <Col className=\"d-flex justify-content-end\">\n          <Image\n            src=\"https://cdn.clipart.email/cd1a0326018498328550a0d2fb72666c_gray-silhouette-of-a-man-clip-art-at-clkercom-vector-clip-art-_204-592.png\"\n            rounded\n            style={{ height: `${personImageHeight}px`, padding: \"0 50px\" }}\n          />\n        </Col>\n        <Col className=\"d-flex justify-content-start\">\n          <Image\n            src={pokemonUrl}\n            rounded\n            style={{ height: `${pokemonImageHeight}px` }}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default CompDisplay;\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Spinner } from \"react-bootstrap\";\nimport \"./App.scss\";\nimport Search from \"./components/Search\";\nimport Footer from \"./components/Footer\";\nimport CompDisplay from \"./components/CompDisplay\";\n\nconst App = () => {\n  const [display, setDisplay] = useState(false);\n  const [options, setOptions] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [selectedPokemon, setSelectedPokemon] = useState({});\n  const [loading, isLoading] = useState(false);\n\n  useEffect(() => {\n    fetchPokemon();\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  const handleClickOutside = (event) => {\n    if (event.target.id !== \"search\" && event.target.className !== \"sprite\") {\n      setDisplay(false);\n    }\n  };\n\n  const fetchPokemon = async () => {\n    isLoading(true);\n    const pokemon = [];\n    const promises = new Array(807)\n      .fill()\n      .map((value, index) =>\n        fetch(`https://pokeapi.co/api/v2/pokemon/${index + 1}/`)\n      );\n\n    await Promise.all(promises).then((pokemonArr) => {\n      return pokemonArr.map((response) =>\n        response\n          .json()\n          .then(({ id, name, sprites: { front_default: sprite }, height }) => {\n            const capitalizedName =\n              name.charAt(0).toUpperCase() + name.slice(1);\n            if (sprite === null) {\n              sprite = \"/pokeball.jpg\";\n            }\n            pokemon.push({\n              id,\n              name: capitalizedName,\n              sprite,\n              height,\n            });\n            pokemon.sort((a, b) => {\n              return a.id > b.id ? 1 : -1;\n            });\n          })\n      );\n    });\n    setOptions(pokemon);\n    isLoading(false);\n  };\n\n  const setPokedex = (pokemon) => {\n    setSearch(pokemon.name);\n    setSelectedPokemon({\n      id: pokemon.id,\n      name: pokemon.name,\n      height: pokemon.height,\n    });\n    setDisplay(false);\n  };\n\n  let content;\n  if (loading) {\n    content = (\n      <Container className=\"h-100\">\n        <Spinner animation=\"border\" variant=\"warning\" />\n      </Container>\n    );\n  } else {\n    content = (\n      <Container>\n        <Search\n          display={display}\n          setDisplay={setDisplay}\n          options={options}\n          search={search}\n          setSearch={setSearch}\n          setPokedex={setPokedex}\n        />\n        <Row>\n          <CompDisplay pokemon={selectedPokemon} />\n        </Row>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      {content}\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}